// Задание 7. (необязательное)
// Напишите функцию intersection(arr1, arr2). 
// Она должна принимать на вход два массива целых чисел. 
// Функция должна вернуть новый массив чисел, содержащихся в обоих исходных массивах (порядок не важен).

// Протестируйте решение, вызывая функцию с разными аргументами:

// console.log(intersection([1, 5, 4, 2], [8, 91, 4, 1, 3])); // должна вернуть [4, 1]
// console.log(intersection([1, 5, 4, 2], [7, 12])); // должна вернуть []
// console.log(intersection([1, 1, 0, 0, 0, 1, 5, 4, 2], [7, 12, 1, 1, 1, 1, 1, 0, 0, 0, 0])); // должна вернуть [1, 0]

const intersection = (arr1, arr2) => {
    const setArr2 = new Set(arr2); // Конвертируем arr2 в Set для быстрого поиска
    const result = [];

    for (let i = 0; i < arr1.length; i++) {
        // Проверяем, содержится ли элемент arr1[i] в Set arr2
        if (setArr2.has(arr1[i]) && !result.includes(arr1[i])) {
            result.push(arr1[i]); // Добавляем элемент в результат, если его там еще нет
        }
    }

    return result; // Возвращаем массив с уникальными элементами
}

// Протестируем
console.log(intersection([1, 5, 4, 2], [8, 91, 4, 1, 3])); // должна вернуть [4, 1]
console.log(intersection([1, 5, 4, 2], [7, 12])); // должна вернуть []
console.log(intersection([1, 1, 0, 0, 0, 1, 5, 4, 2], [7, 12, 1, 1, 1, 1, 1, 0, 0, 0, 0])); // должна вернуть [1, 0]
console.log(intersection([10, 45, 8, 64, 2, 5, 7, 20], [1, 8, 0, 64, 7, 5, 6, 20, 56, 100])); 
